{"version":3,"sources":["components/Board/Tile/Tile.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Tile","x","y","currentValue","currentPlayer","players","onMove","useState","isHovered","setIsHovered","style","color","width","height","fontWeight","borderRadius","margin","backgroundColor","className","onMouseEnter","onMouseOut","onClick","playerName","tileValues","setTileValues","tempValues","slice","Board","setCurrentPlayer","showReset","setShowReset","useEffect","isEmpty","i","j","cb","fontFamily","marginTop","Array","keys","map","h","key","w","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f27d3f5a.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Tile = ({\n    x,\n    y,\n    currentValue,\n    currentPlayer,\n    players,\n    onMove\n}) => {\n    const [isHovered, setIsHovered] = useState(false);\n\n    const onClickTile = () => {\n        if (currentValue === '') {\n            onMove((playerName, [tileValues, setTileValues]) => {\n                const tempValues = tileValues.slice(0);\n                tempValues[x][y] = playerName;\n                setTileValues(tempValues);\n            });\n        }\n    };\n\n    const onTileHover = () => {\n        setIsHovered(true);\n    };\n\n    const onTileOut = () => {\n        setIsHovered(false);\n    };\n\n    return (\n        <>\n            <button style={{\n                color: !isHovered  ? (currentValue === players[1] ? \"green\" : \"blue\") : currentValue === \"\" ? \"white\" : \"black\",\n                width: \"100px\",\n                height: \"100px\",\n                fontWeight: \"bold\",\n                borderRadius: \"10px\",\n                margin: \"10px\",\n                backgroundColor: isHovered && currentValue === \"\" ? (currentPlayer === players[1] ? \"green\" : \"blue\") : \"white\",\n            }} className=\"tile btn\" onMouseEnter={onTileHover} onMouseOut={onTileOut} onClick={onClickTile}>\n                {(isHovered && currentValue === \"\") ? currentPlayer : currentValue}\n            </button>\n        </>\n    );\n};\n\nexport default Tile;\n","import React, { useState, useEffect } from 'react';\nimport Tile from './Tile';\n\nconst BOARD_SIZE = 3;\n\nconst Board = () => {\n    const [tileValues, setTileValues] = useState([\n        ['', '', ''],\n        ['', '', ''],\n        ['', '', ''],\n    ]);\n    const players = ['O', 'X'];\n    const [currentPlayer, setCurrentPlayer] = useState(players[0]);\n    const [showReset, setShowReset] = useState(false);\n\n    useEffect(() => {\n        let isEmpty = false;\n        for (let i = 0; i < BOARD_SIZE; i += 1) {\n            for (let j = 0; j < BOARD_SIZE; j += 1) {\n                if (tileValues[i][j] === '') {\n                    isEmpty = true;\n                    break;\n                }\n            }\n\n            if (isEmpty === true) break;\n        }\n\n        // game finished\n        if (isEmpty === false) {\n            setShowReset(true);\n        }\n    }, [tileValues]);\n\n    const onMove = cb => {\n        if (cb) {\n            cb(currentPlayer, [tileValues, setTileValues]);\n        }\n\n        if (currentPlayer === players[0]) {\n            setCurrentPlayer(players[1]);\n            return;\n        }\n\n        setCurrentPlayer(players[0]);\n    };\n\n    const onClickResetBoard = () => {\n        setTileValues([\n            ['', '', ''],\n            ['', '', ''],\n            ['', '', ''],\n        ]);\n        setShowReset(false);\n        setCurrentPlayer(players[0]);\n    };\n\n    return (\n        <div className=\"container\">\n            <div style={{fontFamily: \"Times New Roman\", marginTop: \"13%\"}} className=\"row\">\n                {!showReset\n                    ?\n                        <h5 style={{color: \"rgb(100, 100, 100)\"}}>\n                            Current player is&nbsp;\n                            <span style={{color: currentPlayer === players[1] ? \"green\" : \"blue\",}}>\n                                {currentPlayer}\n                            </span>\n                        </h5>\n                    :\n                        <h5>\n                            <b>Game done!</b>\n                        </h5>\n                }\n            </div>\n\n            <div className=\"row\">\n                {\n                    ([...Array(BOARD_SIZE).keys()].map(h =>\n                        <div key={h}>\n                            {\n                                ([...Array(BOARD_SIZE).keys()].map(w =>\n                                    <Tile\n                                        key={w}\n                                        x={w}\n                                        y={h}\n                                        currentValue={tileValues[w][h]}\n                                        currentPlayer={currentPlayer}\n                                        players={players}\n                                        onMove={onMove}\n                                    />\n                                ))\n                            }\n                            <br />\n                        </div>\n                    ))\n                }\n            </div>\n\n            {showReset &&\n                <div className=\"row\">\n                    <button className=\"btn\" onClick={onClickResetBoard}>\n                        Reset board\n                    </button>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <nav className=\"green darken-4\">\n            <b>Tic-Tac-Toe Game</b>\n        </nav>\n\n        <Board />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}